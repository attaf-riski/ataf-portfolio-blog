[{"content":"🔗 GitHub ✏️ Tugas saya di Anforcom adalah membuat landing page untuk acara ini, dengan menggunakan TailwindCSS dan NextJS untuk membuatnya. Anforcom (Annual Informatics Competition) adalah serangkaian acara dan perlombaan yang diadakan Mahasiswa Informatika Universitas Diponegoro. Event ini dilaksanakan dalam rangka mengenalkan Kultur Teknologi kepada masyarakat dan menumbuhkan jiwa-jiwa kompetititf yang sportif di kalangan pelajar 👨🏽‍🎓.\n","permalink":"/projects/anforcom-2022/","summary":"🔗 GitHub ✏️ Tugas saya di Anforcom adalah membuat landing page untuk acara ini, dengan menggunakan TailwindCSS dan NextJS untuk membuatnya. Anforcom (Annual Informatics Competition) adalah serangkaian acara dan perlombaan yang diadakan Mahasiswa Informatika Universitas Diponegoro. Event ini dilaksanakan dalam rangka mengenalkan Kultur Teknologi kepada masyarakat dan menumbuhkan jiwa-jiwa kompetititf yang sportif di kalangan pelajar 👨🏽‍🎓.","title":"Landing Page Anforcom 2022"},{"content":"🔗 GitHub LemariRapi adalah aplikasi mobile yang dibuat menggunakan teknologi flutter dan menggunakan database dari firebase. Kegunaan utama dari aplikasi ini yaitu dapat menyimpan data digital pakaian kedalam smartphone android kamu. Aku membuat aplikasi ini ketika liburan semester 2 dan juga untuk menjadi syarat kelulusan kursus flutter dicoding. Slogan aplikasi ini adalah \u0026ldquo;LemariRapi bikin lemari lo jadi rapi\u0026rdquo; 😄\n","permalink":"/projects/lemari-rapi/","summary":"🔗 GitHub LemariRapi adalah aplikasi mobile yang dibuat menggunakan teknologi flutter dan menggunakan database dari firebase. Kegunaan utama dari aplikasi ini yaitu dapat menyimpan data digital pakaian kedalam smartphone android kamu. Aku membuat aplikasi ini ketika liburan semester 2 dan juga untuk menjadi syarat kelulusan kursus flutter dicoding. Slogan aplikasi ini adalah \u0026ldquo;LemariRapi bikin lemari lo jadi rapi\u0026rdquo; 😄","title":"Lemari Rapi"},{"content":"Pendahuluan Pernah terbayang bagaimana password kamu diamankan di dalam server? Atau pernah kepikiran bagaimana pesan whatsapp kamu dikirim secara aman? Enkripsi jawabannya! Enkripsi yang menjadi standar dunia digital saat ini merupakan jenis yang cukup aman dan terbaru. Nah, pada kesempatan ini aku mau berbagi tentang modifikasi enkripsi klasik yang tentunya lebih mudah daripada enkripsi modern yaa, namanya adalah enkripsi vigenere cipher 🔑.\nVigenere Cipher adalah salah satu teknik enkripsi klasik yang diciptakan pada tahun 1553 oleh Blaise de Vigenere, seorang matematikawan Prancis. Selama berabad-abad, teknik ini telah digunakan untuk menyandikan pesan rahasia dan banyak dianggap sebagai salah satu cipher yang paling tidak dapat ditembus. Keren ngga tuh!\nCara Kerja Enkripsi Vigenere Cipher Cara kerjanya adalah tiap huruf pada kalimat yang akan dienkripsi memiliki nilai ascii, nilai tersebut akan ditambah dengan nilai ascii dari kunci lalu di modulus 256. Tunggu kenapa di modulus? Hal tersebut karena kali ini aku akan memakai kode ascii yang jumlah hurufnya 256 kalau lebih dari itu ngga di hitung dulu hurufnya.\nEnkripsi Dekripsi Untuk mendekripsi atau mengubah dari pesan enkripsi ke pesan asli caranya dengan mengurangi nilai ascii tiap huruf enkripsi dengan nilai kunci lalu di modulus 256.\nKali ini aku pakai bahasa pemrograman python untuk mengimplementasikan algoritma dari enkripsi vigenere cipher. Biasanya kalau lihat kodenya atau lihat praktiknya bakalan lebih mudah ya,\nEnkripsi # Fungsi Enkripsi def cipherText(message, key_new): # Kamus lokal cipher_text = \u0026#39;\u0026#39; i = 0 # Algoritma for letter in message: x = ord(letter)+(ord(key_new[i])) % 256 cipher_text += chr(x) i += 1 return cipher_text Dekripsi # Fungsi Dekripsi def originalText(cipher_text, key_new): # Kamus lokal or_txt = \u0026#39;\u0026#39; i = 0 # Algoritma for letter in cipher_text: x = ord(letter)-(ord(key_new[i])+256) % 256 or_txt += chr(x) i += 1 return or_txt Menghasilkan Kunci Kunci dalam vigenere cipher adalah kunci, lohe kok aneh. hhh. Tapi memang benar kunci dalam algoritma enkripsi ini sangat penting. Lebih baik terlihat pesannya daripada terlihat kuncinya. Kunci dimasukan oleh pemrograman yang kemudian akan disesuaikan panjangnya dengan pesan asli agar semua huruf tercakup.\n# Membuat kunci baru def generate_key(message, key): # Kamus Lokal i = 0 # Algoritma while True: if len(key) == len(message): break else: key += (key[i% len(key)]) i += 1 print(\u0026#34;key: \u0026#34;,key) return key Kenapa Perlu Memofifikasi Vigenere Cipher? Pertanyaan bagus, masalah yang akan muncul ketika menggunakan enkripsi vigenere cipher adalah pesan cipher dapat memiliki pola kalau pesannya memiliki huruf yang sama dan itu adalah hal yang tidak bagus. Modifikasi Enkripsi Vigenere Cipher Berangkat dari kekurangan vigenere cipher aku bakal modif ini algoritma, konsepnya nanti membagi nilai suatu huruf dipesan menjadi dua bagian yang apabila dijumlahkan akan menghasilkan nilai asli itu sendiri. Lalu nilainya dapat dari mana? Dengan cara menghasilkannya secara random antara 0 - nilai asli. Lalu nilai asli dikurangi nilai random tersebut sehingga dapat menghasilkan pesan yang lebih panjang dua kali.\nEnkripsi # buat original text 2X lipat lebih panjang for letter in message: z = ord(letter) nil_random = random.randint(1, z) modif_ori += chr(nil_random) modif_ori += chr(z-nil_random) Baru setelah itu dienkripsi seperti biasa seperti vigenere cipher, namun tentunya dengan modifikasi sedikit agar satu kunci bisa untuk dua huruf\nDekripsi Untuk dekripsinya, prosesnya dibalik dari proses enkripsi. Memakai satu kunci untuk dua huruf cipher text baru setelah itu digabung.\n# Fungsi Dekripsi def originalText(cipher_text, key_new): # Kamus lokal or_txt = \u0026#39;\u0026#39; i = 0 modif_ori = \u0026#39;\u0026#39;; # Algoritma # deksripsi seperti biasa for j in range(1,len(cipher_text),2): #pakai satu kunci untuk 2 original text for k in range(2): x = (ord(cipher_text[j+k-1])-(ord(key_new[i])+256)) % 256 or_txt += chr(x) i += 1 # jadikan or_txt 2 kali lebih kecil for r in range(0,len(or_txt),2): modif_ori += chr(ord(or_txt[r])+ord(or_txt[r+1])) return modif_ori Untuk proses menghasilkan kunci sama saja\nKelebihan Dengan menggunakan algoritma ini, pesan cipher tidak akan memiliki pola dan akan random setiap dihasilkan!\nVigenere Cipher Asli Python # Nama file: vigenere-cipher.ipynb # Deskripsi: modul vigenere-cipher tanpa autokey # Pembuat: Attaf Riski # Tanggal: 9 Des 2022 import random # Membuat kunci baru def generate_key(message, key): # Kamus Lokal i = 0 # Algoritma while True: if len(key) == len(message): break else: key += (key[i% len(key)]) i += 1 print(\u0026#34;key: \u0026#34;,key) return key # Fungsi Enkripsi def cipherText(message, key_new): # Kamus lokal cipher_text = \u0026#39;\u0026#39; i = 0 # Algoritma for letter in message: x = ord(letter)+(ord(key_new[i])) % 256 cipher_text += chr(x) i += 1 return cipher_text # Fungsi Dekripsi def originalText(cipher_text, key_new): # Kamus lokal or_txt = \u0026#39;\u0026#39; i = 0 # Algoritma for letter in cipher_text: x = ord(letter)-(ord(key_new[i])+256) % 256 or_txt += chr(x) i += 1 return or_txt def main(): message = \u0026#39;aaaaaaaaaaaaaaaaa\u0026#39; key = \u0026#39;februari\u0026#39; key_new = \u0026#39;\u0026#39; if(len(key)\u0026gt;len(message)): key_new = key[:len(message)] elif(len(key)\u0026lt;len(message)): key_new = generate_key(message, key) else: key_new = key cipher_text = cipherText(message, key_new) original_text = originalText(cipher_text, key_new) print(\u0026#34;Teks Cipher =\u0026#34;, cipher_text) print(\u0026#34;Teks Asli =\u0026#34;, original_text) # Executes the main function if __name__ == \u0026#39;__main__\u0026#39;: main() Vigenere Cipher Modifikasi # Nama file: modifikasi-vigenere-cipher.ipynb # Deskripsi: tugas akhir KJI \u0026gt; modul modifikasi vigenere cipher # Pembuat: Attaf Riski # Tanggal: 8 Des 2022 import random # Membuat kunci baru def generate_key(message, key): # Kamus Lokal i = 0 # Algoritma while True: if len(key) == len(message): break else: key += key[i % len(key)] i += 1 print(\u0026#34;key: \u0026#34;,key) return key # Fungsi Enkripsi def cipherText(message, key_new): # Kamus lokal cipher_text = \u0026#39;\u0026#39; i = 0 nil_random = 0; modif_ori = \u0026#39;\u0026#39; # Algoritma # buat original text 2X lipat lebih panjang for letter in message: z = ord(letter) nil_random = random.randint(1, z) modif_ori += chr(nil_random) modif_ori += chr(z-nil_random) # enkripsi seperti biasa for j in range(1,len(modif_ori),2): #pakai satu kunci untuk 2 original text for k in range(2): x = (ord(modif_ori[j+k-1])+(ord(key_new[i]))) % 256 cipher_text += chr(x) i += 1 return cipher_text # Fungsi Dekripsi def originalText(cipher_text, key_new): # Kamus lokal or_txt = \u0026#39;\u0026#39; i = 0 modif_ori = \u0026#39;\u0026#39;; # Algoritma # deksripsi seperti biasa for j in range(1,len(cipher_text),2): #pakai satu kunci untuk 2 original text for k in range(2): x = (ord(cipher_text[j+k-1])-(ord(key_new[i])+256)) % 256 or_txt += chr(x) i += 1 # jadikan or_txt 2 kali lebih kecil for r in range(0,len(or_txt),2): modif_ori += chr(ord(or_txt[r])+ord(or_txt[r+1])) return modif_ori def main(): message = \u0026#39;aaaaaaaaaaaaaaaaa\u0026#39; key = \u0026#39;februari\u0026#39; key_new = \u0026#39;\u0026#39; if(len(key)\u0026gt;len(message)): key_new = key[:len(message)] elif(len(key)\u0026lt;len(message)): key_new = generate_key(message, key) else: key_new = key cipher_text = cipherText(message, key_new) original_text = originalText(cipher_text, key_new) print(\u0026#34;Teks Cipher =\u0026#34;, cipher_text) print(\u0026#34;Teks Asli =\u0026#34;, original_text) # Executes the main function if __name__ == \u0026#39;__main__\u0026#39;: main() Itu Sudah Semua! Kalau mau lihat colab. Jika kamu membaca sampai titik ini aku ucapkan terimakasih, dengan ini juga kamu telah mempelajari salah satu jenis enkripsi klasik, kalau kamu tertarik coba deh cari keyword ini di google: autokey dan enkripsi modern. Maaf kalau ada tutur kata yang kurang berkenan 😌. Thanks Chat GPT for the layout ❤️.\n","permalink":"/blog/modifikasi_vigenere_cipher/","summary":"Pendahuluan Pernah terbayang bagaimana password kamu diamankan di dalam server? Atau pernah kepikiran bagaimana pesan whatsapp kamu dikirim secara aman? Enkripsi jawabannya! Enkripsi yang menjadi standar dunia digital saat ini merupakan jenis yang cukup aman dan terbaru. Nah, pada kesempatan ini aku mau berbagi tentang modifikasi enkripsi klasik yang tentunya lebih mudah daripada enkripsi modern yaa, namanya adalah enkripsi vigenere cipher 🔑.\nVigenere Cipher adalah salah satu teknik enkripsi klasik yang diciptakan pada tahun 1553 oleh Blaise de Vigenere, seorang matematikawan Prancis.","title":"Modifikasi Enkripsi Vigenere Cipher"},{"content":"","permalink":"/blog/knapsack_with_dp_es/","summary":"","title":""}]